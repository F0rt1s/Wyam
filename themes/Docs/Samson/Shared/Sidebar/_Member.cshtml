@{
	IDocument containingNamespace = Model.Get<IDocument>("ContainingNamespace");
	if(containingNamespace != null)
	{
		<li class="header">Namespace</li>
		<li>@Context.GetTypeLink(containingNamespace)</li>
	}
	
	IDocument containingType = Model.Get<IDocument>("ContainingType");
	if(containingType != null)
	{
		<li class="header">Type</li>
		<li>@Context.GetTypeLink(containingType)</li>
		
		<li role="separator" class="divider"></li>
		
		IReadOnlyList<IDocument> constructors = containingType
			.List<IDocument>("Constructors")
			.Where(x => x.Get<bool>("IsResult"))
			.ToList();
		if(constructors != null && constructors.Count > 0)
		{
			<li class="header">Constructors</li>
			foreach(IDocument constructor in constructors)
			{
				string activeClass = constructor.String("SymbolId") == Model.String("SymbolId") ? "active" : null;
				<li class="@activeClass">@Context.GetTypeLink(constructor)</li>
			}
		}			
	
		foreach(IGrouping<string, IDocument> memberGroup 
			in containingType.List<IDocument>("Members")
				.Where(x => x.Get<bool>("IsResult"))
				.GroupBy(x => x.String("Kind")))
		{
			<li class="header">@memberGroup.Key Members</li>
			foreach(IDocument member in memberGroup
				.OrderBy(x => x.String("Name")))
			{
				string activeClass = member.String("SymbolId") == Model.String("SymbolId") ? "active" : null;
				<li class="@activeClass">@Context.GetTypeLink(member)</li>
			}	
		}
	}
}